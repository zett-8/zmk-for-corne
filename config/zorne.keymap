/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//&sk {
//    release-after-ms = <750>;
//    quick-release;
//};

&caps_word {
    continue-list = <DEL MINUS BSPC>;
};

#define BASE_L 0
#define NUM_L  1
#define NAV_L  2

//#define VI_U LC(Z)
//#define VI_W LC(RIGHT)
//#define VI_B LC(LEFT)

#define L_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define R_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33 34 35

/ {
    combos {
        compatible = "zmk,combos";

        // shortcut
        #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
              combo_##NAME { \
                timeout-ms = <TIMEOUT>; \
                bindings = <BINDINGS>; \
                key-positions = <KEYPOS>; \
              };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(escape, &kp ESC, 1 2, 60)
        COMBO(tab, &kp TAB, 11 12, 60)

        COMBO(kana, &kp LANG1, 6 16, 60)
        COMBO(eisuu, &kp LANG2, 3 13, 60)

        COMBO(copy, &kp LG(C), 21 22, 60)
        COMBO(paste, &kp LG(V), 22 23, 60)

        COMBO(backspace, &kp BSPC, 7 8, 60)
        COMBO(return, &kp RET, 17 18, 60)
    };

    behaviors {
        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <75>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };
        lhr: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <R_KEYS>;
        };
        rhr: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <L_KEYS>;
        };
    };

	keymap {
		compatible = "zmk,keymap";

        // COLEMAK
		colemak_layer {
			bindings = <
                   &kp Q        &kp W         &kp F         &kp P              &kp G              &kp J               &kp L            &kp U                 &kp Y         &kp MINUS
                   &lhr LALT A  &lhr LCTRL R  &lhr LCMD S   &lhr LSHIFT T      &kp D              &kp H               &rhr RSHIFT N    &rhr RCMD E           &rhr RCTRL I  &rhr RALT O
                   &kp Z        &kp X         &kp C         &kp V              &kp B              &kp K               &kp M            &kp COMMA             &kp DOT       &kp SLASH
				 /*&            &*/           &none         &mt LG(LSHIFT) TAB &kp SPACE          &mo NUM_L           &base_lt NAV_L RCMD  &none     /*  &             &*/
			>;
		};

		num_layer {
			bindings = <
                   &kp N1       &kp N2        &kp N3        &kp N4             &kp N5             &kp N6              &kp N7           &kp N8                   &kp N9        &kp N0
                   &lhr LALT GRAVE &kp LCTRL  &kp LCMD      &lhr LSHIFT BACKSLASH  &none          &kp SEMI            &rhr RSHIFT LBKT &rhr RCMD RBKT           &rhr RCTRL SQT &rhr RALT EQUAL
                   &none        &none         &none         &none              &none              &none               &none            &none                    &none         &none
				 /*&            &*/           &none         &trans             &kp LSHIFT         &trans              &trans           &none     /*             &             &*/
			>;
		};

		nav_layer {
			bindings = <
                   &none        &kp UP        &none         &none              &none             &kp C_VOL_UP        &kp F13          &kp UP                   &kp F14       &none
                   &kp LALT     &kp LCTRL     &kp LCMD      &kp LSHIFT         &none             &kp C_VOL_DN        &kp LEFT         &kp DOWN                 &kp RIGHT     &none
                   &none        &none         &none         &none              &none             &none               &kp LG(LS(LBKT)) &none                    &kp LG(LS(RBKT)) &none
				 /*&            &*/         &none         &trans            &mt BSPC BSPC    &bt BT_PRV       &bt BT_NXT               &none     /*            &             &*/
			>;
		};
	};
};
